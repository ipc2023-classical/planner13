# Stage 1: Compile the planner
Bootstrap: docker
From: ubuntu:kinetic
Stage: build

%files
    .

%post
    ## Install all dependencies.
    apt-get update
    apt-get -y install --no-install-recommends cmake make g++ pypy3 automake libboost-all-dev


    ## Clear build directory.
    rm -rf ./builds

    ## Build planner.
    pypy3 build.py release64

    ## Strip binaries (shell globs don't work).
    strip --strip-all /builds/release64/bin/downward
    strip --strip-all /builds/release64/bin/preprocess-h2

# Stage 2: Run the planner
Bootstrap: docker
From: ubuntu:kinetic
Stage: run

%files from build
    fast-downward.py
    driver
    builds/release64/bin/

%post
    apt-get update
    apt-get -y install --no-install-recommends pypy3
    apt-get clean
    rm -rf /var/lib/apt/lists/*

%runscript
    DOMAINFILE="$1"
    PROBLEMFILE="$2"
    PLANFILE="$3"

    pypy3 /fast-downward.py \
        --plan-file "$PLANFILE" \
        --build release64 \
        --alias "seq-opt-ftsmiasm1000-sbd" \
        --overall-memory-limit 8000M \
        --overall-time-limit 30m \
        --transform-task /builds/release64/bin/preprocess-h2 \
        --transform-task-options h2_time_limit,240 \
        "$DOMAINFILE" "$PROBLEMFILE"

%labels
Name   FTSPlan
Description Optimal planner based on reformulation and search under the merge-and-shrink representation search.
Authors     Alvaro Torralba <alto@cs.aau.dk>
License     GPL 3
Tracks      optimal
SupportsDerivedPredicates                       no
SupportsUniversallyQuantifiedPreconditions      yes
SupportsExistentiallyQuantifiedPreconditions    partially, only quantification over static predicates
SupportsUniversallyQuantifiedEffects            yes
SupportsNegativePreconditions                   yes
SupportsEqualityPreconditions                   yes
SupportsInequalityPreconditions                 yes
SupportsConditionalEffects                      yes
SupportsImplyPreconditions                      yes
